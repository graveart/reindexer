// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_schema_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_schema_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_schema_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_schema_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_schema_2eproto;
class Person;
class PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
class Person_Address;
class Person_AddressDefaultTypeInternal;
extern Person_AddressDefaultTypeInternal _Person_Address_default_instance_;
class Person_Address_Home;
class Person_Address_HomeDefaultTypeInternal;
extern Person_Address_HomeDefaultTypeInternal _Person_Address_Home_default_instance_;
class Person_Address_PhoneNumber;
class Person_Address_PhoneNumberDefaultTypeInternal;
extern Person_Address_PhoneNumberDefaultTypeInternal _Person_Address_PhoneNumber_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Person* Arena::CreateMaybeMessage<::Person>(Arena*);
template<> ::Person_Address* Arena::CreateMaybeMessage<::Person_Address>(Arena*);
template<> ::Person_Address_Home* Arena::CreateMaybeMessage<::Person_Address_Home>(Arena*);
template<> ::Person_Address_PhoneNumber* Arena::CreateMaybeMessage<::Person_Address_PhoneNumber>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Person_Address_PhoneNumber PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Person.Address.PhoneNumber) */ {
 public:
  inline Person_Address_PhoneNumber() : Person_Address_PhoneNumber(nullptr) {}
  virtual ~Person_Address_PhoneNumber();

  Person_Address_PhoneNumber(const Person_Address_PhoneNumber& from);
  Person_Address_PhoneNumber(Person_Address_PhoneNumber&& from) noexcept
    : Person_Address_PhoneNumber() {
    *this = ::std::move(from);
  }

  inline Person_Address_PhoneNumber& operator=(const Person_Address_PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person_Address_PhoneNumber& operator=(Person_Address_PhoneNumber&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person_Address_PhoneNumber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person_Address_PhoneNumber* internal_default_instance() {
    return reinterpret_cast<const Person_Address_PhoneNumber*>(
               &_Person_Address_PhoneNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Person_Address_PhoneNumber& a, Person_Address_PhoneNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(Person_Address_PhoneNumber* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person_Address_PhoneNumber* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person_Address_PhoneNumber* New() const final {
    return CreateMaybeMessage<Person_Address_PhoneNumber>(nullptr);
  }

  Person_Address_PhoneNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person_Address_PhoneNumber>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person_Address_PhoneNumber& from);
  void MergeFrom(const Person_Address_PhoneNumber& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person_Address_PhoneNumber* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Person.Address.PhoneNumber";
  }
  protected:
  explicit Person_Address_PhoneNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2eproto);
    return ::descriptor_table_schema_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string number = 1;
  void clear_number();
  const std::string& number() const;
  void set_number(const std::string& value);
  void set_number(std::string&& value);
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  std::string* mutable_number();
  std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Person.Address.PhoneNumber)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class Person_Address_Home PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Person.Address.Home) */ {
 public:
  inline Person_Address_Home() : Person_Address_Home(nullptr) {}
  virtual ~Person_Address_Home();

  Person_Address_Home(const Person_Address_Home& from);
  Person_Address_Home(Person_Address_Home&& from) noexcept
    : Person_Address_Home() {
    *this = ::std::move(from);
  }

  inline Person_Address_Home& operator=(const Person_Address_Home& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person_Address_Home& operator=(Person_Address_Home&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person_Address_Home& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person_Address_Home* internal_default_instance() {
    return reinterpret_cast<const Person_Address_Home*>(
               &_Person_Address_Home_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Person_Address_Home& a, Person_Address_Home& b) {
    a.Swap(&b);
  }
  inline void Swap(Person_Address_Home* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person_Address_Home* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person_Address_Home* New() const final {
    return CreateMaybeMessage<Person_Address_Home>(nullptr);
  }

  Person_Address_Home* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person_Address_Home>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person_Address_Home& from);
  void MergeFrom(const Person_Address_Home& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person_Address_Home* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Person.Address.Home";
  }
  protected:
  explicit Person_Address_Home(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2eproto);
    return ::descriptor_table_schema_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCityFieldNumber = 1,
    kStreetFieldNumber = 2,
  };
  // string city = 1;
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string street = 2;
  void clear_street();
  const std::string& street() const;
  void set_street(const std::string& value);
  void set_street(std::string&& value);
  void set_street(const char* value);
  void set_street(const char* value, size_t size);
  std::string* mutable_street();
  std::string* release_street();
  void set_allocated_street(std::string* street);
  private:
  const std::string& _internal_street() const;
  void _internal_set_street(const std::string& value);
  std::string* _internal_mutable_street();
  public:

  // @@protoc_insertion_point(class_scope:Person.Address.Home)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr street_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class Person_Address PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Person.Address) */ {
 public:
  inline Person_Address() : Person_Address(nullptr) {}
  virtual ~Person_Address();

  Person_Address(const Person_Address& from);
  Person_Address(Person_Address&& from) noexcept
    : Person_Address() {
    *this = ::std::move(from);
  }

  inline Person_Address& operator=(const Person_Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person_Address& operator=(Person_Address&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person_Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person_Address* internal_default_instance() {
    return reinterpret_cast<const Person_Address*>(
               &_Person_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Person_Address& a, Person_Address& b) {
    a.Swap(&b);
  }
  inline void Swap(Person_Address* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person_Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person_Address* New() const final {
    return CreateMaybeMessage<Person_Address>(nullptr);
  }

  Person_Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person_Address>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person_Address& from);
  void MergeFrom(const Person_Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person_Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Person.Address";
  }
  protected:
  explicit Person_Address(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2eproto);
    return ::descriptor_table_schema_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Person_Address_PhoneNumber PhoneNumber;
  typedef Person_Address_Home Home;

  // accessors -------------------------------------------------------

  enum : int {
    kPhonesFieldNumber = 1,
    kHomesFieldNumber = 2,
    kPostalcodesFieldNumber = 3,
  };
  // repeated .Person.Address.PhoneNumber phones = 1;
  int phones_size() const;
  private:
  int _internal_phones_size() const;
  public:
  void clear_phones();
  ::Person_Address_PhoneNumber* mutable_phones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Person_Address_PhoneNumber >*
      mutable_phones();
  private:
  const ::Person_Address_PhoneNumber& _internal_phones(int index) const;
  ::Person_Address_PhoneNumber* _internal_add_phones();
  public:
  const ::Person_Address_PhoneNumber& phones(int index) const;
  ::Person_Address_PhoneNumber* add_phones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Person_Address_PhoneNumber >&
      phones() const;

  // repeated .Person.Address.Home homes = 2;
  int homes_size() const;
  private:
  int _internal_homes_size() const;
  public:
  void clear_homes();
  ::Person_Address_Home* mutable_homes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Person_Address_Home >*
      mutable_homes();
  private:
  const ::Person_Address_Home& _internal_homes(int index) const;
  ::Person_Address_Home* _internal_add_homes();
  public:
  const ::Person_Address_Home& homes(int index) const;
  ::Person_Address_Home* add_homes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Person_Address_Home >&
      homes() const;

  // repeated string postalcodes = 3;
  int postalcodes_size() const;
  private:
  int _internal_postalcodes_size() const;
  public:
  void clear_postalcodes();
  const std::string& postalcodes(int index) const;
  std::string* mutable_postalcodes(int index);
  void set_postalcodes(int index, const std::string& value);
  void set_postalcodes(int index, std::string&& value);
  void set_postalcodes(int index, const char* value);
  void set_postalcodes(int index, const char* value, size_t size);
  std::string* add_postalcodes();
  void add_postalcodes(const std::string& value);
  void add_postalcodes(std::string&& value);
  void add_postalcodes(const char* value);
  void add_postalcodes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& postalcodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_postalcodes();
  private:
  const std::string& _internal_postalcodes(int index) const;
  std::string* _internal_add_postalcodes();
  public:

  // @@protoc_insertion_point(class_scope:Person.Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Person_Address_PhoneNumber > phones_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Person_Address_Home > homes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> postalcodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class Person PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Person) */ {
 public:
  inline Person() : Person(nullptr) {}
  virtual ~Person();

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person* New() const final {
    return CreateMaybeMessage<Person>(nullptr);
  }

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Person";
  }
  protected:
  explicit Person(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2eproto);
    return ::descriptor_table_schema_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Person_Address Address;

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 7,
    kBonusesFieldNumber = 9,
    kIndexedPackedDoubleFieldNumber = 10,
    kIndexedUnpackedDoubleFieldNumber = 11,
    kNameFieldNumber = 1,
    kEmailFieldNumber = 5,
    kAddressFieldNumber = 6,
    kIdFieldNumber = 2,
    kAgeFieldNumber = 3,
    kSalaryFieldNumber = 8,
    kWeightFieldNumber = 4,
    kEnabledFieldNumber = 12,
    kFixedFieldFieldNumber = 13,
  };
  // repeated int32 friends = 7;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_friends(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_friends() const;
  void _internal_add_friends(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_friends();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 friends(int index) const;
  void set_friends(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_friends(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      friends() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_friends();

  // repeated int32 bonuses = 9 [packed = true];
  int bonuses_size() const;
  private:
  int _internal_bonuses_size() const;
  public:
  void clear_bonuses();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bonuses(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_bonuses() const;
  void _internal_add_bonuses(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_bonuses();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 bonuses(int index) const;
  void set_bonuses(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bonuses(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bonuses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bonuses();

  // repeated double indexedPackedDouble = 10 [packed = true];
  int indexedpackeddouble_size() const;
  private:
  int _internal_indexedpackeddouble_size() const;
  public:
  void clear_indexedpackeddouble();
  private:
  double _internal_indexedpackeddouble(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_indexedpackeddouble() const;
  void _internal_add_indexedpackeddouble(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_indexedpackeddouble();
  public:
  double indexedpackeddouble(int index) const;
  void set_indexedpackeddouble(int index, double value);
  void add_indexedpackeddouble(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      indexedpackeddouble() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_indexedpackeddouble();

  // repeated string indexedUnpackedDouble = 11 [packed = false];
  int indexedunpackeddouble_size() const;
  private:
  int _internal_indexedunpackeddouble_size() const;
  public:
  void clear_indexedunpackeddouble();
  const std::string& indexedunpackeddouble(int index) const;
  std::string* mutable_indexedunpackeddouble(int index);
  void set_indexedunpackeddouble(int index, const std::string& value);
  void set_indexedunpackeddouble(int index, std::string&& value);
  void set_indexedunpackeddouble(int index, const char* value);
  void set_indexedunpackeddouble(int index, const char* value, size_t size);
  std::string* add_indexedunpackeddouble();
  void add_indexedunpackeddouble(const std::string& value);
  void add_indexedunpackeddouble(std::string&& value);
  void add_indexedunpackeddouble(const char* value);
  void add_indexedunpackeddouble(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& indexedunpackeddouble() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_indexedunpackeddouble();
  private:
  const std::string& _internal_indexedunpackeddouble(int index) const;
  std::string* _internal_add_indexedunpackeddouble();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 5;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // .Person.Address address = 6;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::Person_Address& address() const;
  ::Person_Address* release_address();
  ::Person_Address* mutable_address();
  void set_allocated_address(::Person_Address* address);
  private:
  const ::Person_Address& _internal_address() const;
  ::Person_Address* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::Person_Address* address);
  ::Person_Address* unsafe_arena_release_address();

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 age = 3;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double salary = 8;
  void clear_salary();
  double salary() const;
  void set_salary(double value);
  private:
  double _internal_salary() const;
  void _internal_set_salary(double value);
  public:

  // int32 weight = 4;
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::int32 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool enabled = 12;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // fixed64 fixedField = 13;
  void clear_fixedfield();
  ::PROTOBUF_NAMESPACE_ID::uint64 fixedfield() const;
  void set_fixedfield(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fixedfield() const;
  void _internal_set_fixedfield(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Person)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > friends_;
  mutable std::atomic<int> _friends_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bonuses_;
  mutable std::atomic<int> _bonuses_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > indexedpackeddouble_;
  mutable std::atomic<int> _indexedpackeddouble_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> indexedunpackeddouble_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::Person_Address* address_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  double salary_;
  ::PROTOBUF_NAMESPACE_ID::int32 weight_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fixedfield_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Person_Address_PhoneNumber

// string number = 1;
inline void Person_Address_PhoneNumber::clear_number() {
  number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Person_Address_PhoneNumber::number() const {
  // @@protoc_insertion_point(field_get:Person.Address.PhoneNumber.number)
  return _internal_number();
}
inline void Person_Address_PhoneNumber::set_number(const std::string& value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:Person.Address.PhoneNumber.number)
}
inline std::string* Person_Address_PhoneNumber::mutable_number() {
  // @@protoc_insertion_point(field_mutable:Person.Address.PhoneNumber.number)
  return _internal_mutable_number();
}
inline const std::string& Person_Address_PhoneNumber::_internal_number() const {
  return number_.Get();
}
inline void Person_Address_PhoneNumber::_internal_set_number(const std::string& value) {
  
  number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Person_Address_PhoneNumber::set_number(std::string&& value) {
  
  number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Person.Address.PhoneNumber.number)
}
inline void Person_Address_PhoneNumber::set_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Person.Address.PhoneNumber.number)
}
inline void Person_Address_PhoneNumber::set_number(const char* value,
    size_t size) {
  
  number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Person.Address.PhoneNumber.number)
}
inline std::string* Person_Address_PhoneNumber::_internal_mutable_number() {
  
  return number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Person_Address_PhoneNumber::release_number() {
  // @@protoc_insertion_point(field_release:Person.Address.PhoneNumber.number)
  return number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Person_Address_PhoneNumber::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Person.Address.PhoneNumber.number)
}

// int32 type = 2;
inline void Person_Address_PhoneNumber::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person_Address_PhoneNumber::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person_Address_PhoneNumber::type() const {
  // @@protoc_insertion_point(field_get:Person.Address.PhoneNumber.type)
  return _internal_type();
}
inline void Person_Address_PhoneNumber::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Person_Address_PhoneNumber::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Person.Address.PhoneNumber.type)
}

// -------------------------------------------------------------------

// Person_Address_Home

// string city = 1;
inline void Person_Address_Home::clear_city() {
  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Person_Address_Home::city() const {
  // @@protoc_insertion_point(field_get:Person.Address.Home.city)
  return _internal_city();
}
inline void Person_Address_Home::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:Person.Address.Home.city)
}
inline std::string* Person_Address_Home::mutable_city() {
  // @@protoc_insertion_point(field_mutable:Person.Address.Home.city)
  return _internal_mutable_city();
}
inline const std::string& Person_Address_Home::_internal_city() const {
  return city_.Get();
}
inline void Person_Address_Home::_internal_set_city(const std::string& value) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Person_Address_Home::set_city(std::string&& value) {
  
  city_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Person.Address.Home.city)
}
inline void Person_Address_Home::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Person.Address.Home.city)
}
inline void Person_Address_Home::set_city(const char* value,
    size_t size) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Person.Address.Home.city)
}
inline std::string* Person_Address_Home::_internal_mutable_city() {
  
  return city_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Person_Address_Home::release_city() {
  // @@protoc_insertion_point(field_release:Person.Address.Home.city)
  return city_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Person_Address_Home::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Person.Address.Home.city)
}

// string street = 2;
inline void Person_Address_Home::clear_street() {
  street_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Person_Address_Home::street() const {
  // @@protoc_insertion_point(field_get:Person.Address.Home.street)
  return _internal_street();
}
inline void Person_Address_Home::set_street(const std::string& value) {
  _internal_set_street(value);
  // @@protoc_insertion_point(field_set:Person.Address.Home.street)
}
inline std::string* Person_Address_Home::mutable_street() {
  // @@protoc_insertion_point(field_mutable:Person.Address.Home.street)
  return _internal_mutable_street();
}
inline const std::string& Person_Address_Home::_internal_street() const {
  return street_.Get();
}
inline void Person_Address_Home::_internal_set_street(const std::string& value) {
  
  street_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Person_Address_Home::set_street(std::string&& value) {
  
  street_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Person.Address.Home.street)
}
inline void Person_Address_Home::set_street(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  street_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Person.Address.Home.street)
}
inline void Person_Address_Home::set_street(const char* value,
    size_t size) {
  
  street_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Person.Address.Home.street)
}
inline std::string* Person_Address_Home::_internal_mutable_street() {
  
  return street_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Person_Address_Home::release_street() {
  // @@protoc_insertion_point(field_release:Person.Address.Home.street)
  return street_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Person_Address_Home::set_allocated_street(std::string* street) {
  if (street != nullptr) {
    
  } else {
    
  }
  street_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), street,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Person.Address.Home.street)
}

// -------------------------------------------------------------------

// Person_Address

// repeated .Person.Address.PhoneNumber phones = 1;
inline int Person_Address::_internal_phones_size() const {
  return phones_.size();
}
inline int Person_Address::phones_size() const {
  return _internal_phones_size();
}
inline void Person_Address::clear_phones() {
  phones_.Clear();
}
inline ::Person_Address_PhoneNumber* Person_Address::mutable_phones(int index) {
  // @@protoc_insertion_point(field_mutable:Person.Address.phones)
  return phones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Person_Address_PhoneNumber >*
Person_Address::mutable_phones() {
  // @@protoc_insertion_point(field_mutable_list:Person.Address.phones)
  return &phones_;
}
inline const ::Person_Address_PhoneNumber& Person_Address::_internal_phones(int index) const {
  return phones_.Get(index);
}
inline const ::Person_Address_PhoneNumber& Person_Address::phones(int index) const {
  // @@protoc_insertion_point(field_get:Person.Address.phones)
  return _internal_phones(index);
}
inline ::Person_Address_PhoneNumber* Person_Address::_internal_add_phones() {
  return phones_.Add();
}
inline ::Person_Address_PhoneNumber* Person_Address::add_phones() {
  // @@protoc_insertion_point(field_add:Person.Address.phones)
  return _internal_add_phones();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Person_Address_PhoneNumber >&
Person_Address::phones() const {
  // @@protoc_insertion_point(field_list:Person.Address.phones)
  return phones_;
}

// repeated .Person.Address.Home homes = 2;
inline int Person_Address::_internal_homes_size() const {
  return homes_.size();
}
inline int Person_Address::homes_size() const {
  return _internal_homes_size();
}
inline void Person_Address::clear_homes() {
  homes_.Clear();
}
inline ::Person_Address_Home* Person_Address::mutable_homes(int index) {
  // @@protoc_insertion_point(field_mutable:Person.Address.homes)
  return homes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Person_Address_Home >*
Person_Address::mutable_homes() {
  // @@protoc_insertion_point(field_mutable_list:Person.Address.homes)
  return &homes_;
}
inline const ::Person_Address_Home& Person_Address::_internal_homes(int index) const {
  return homes_.Get(index);
}
inline const ::Person_Address_Home& Person_Address::homes(int index) const {
  // @@protoc_insertion_point(field_get:Person.Address.homes)
  return _internal_homes(index);
}
inline ::Person_Address_Home* Person_Address::_internal_add_homes() {
  return homes_.Add();
}
inline ::Person_Address_Home* Person_Address::add_homes() {
  // @@protoc_insertion_point(field_add:Person.Address.homes)
  return _internal_add_homes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Person_Address_Home >&
Person_Address::homes() const {
  // @@protoc_insertion_point(field_list:Person.Address.homes)
  return homes_;
}

// repeated string postalcodes = 3;
inline int Person_Address::_internal_postalcodes_size() const {
  return postalcodes_.size();
}
inline int Person_Address::postalcodes_size() const {
  return _internal_postalcodes_size();
}
inline void Person_Address::clear_postalcodes() {
  postalcodes_.Clear();
}
inline std::string* Person_Address::add_postalcodes() {
  // @@protoc_insertion_point(field_add_mutable:Person.Address.postalcodes)
  return _internal_add_postalcodes();
}
inline const std::string& Person_Address::_internal_postalcodes(int index) const {
  return postalcodes_.Get(index);
}
inline const std::string& Person_Address::postalcodes(int index) const {
  // @@protoc_insertion_point(field_get:Person.Address.postalcodes)
  return _internal_postalcodes(index);
}
inline std::string* Person_Address::mutable_postalcodes(int index) {
  // @@protoc_insertion_point(field_mutable:Person.Address.postalcodes)
  return postalcodes_.Mutable(index);
}
inline void Person_Address::set_postalcodes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Person.Address.postalcodes)
  postalcodes_.Mutable(index)->assign(value);
}
inline void Person_Address::set_postalcodes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Person.Address.postalcodes)
  postalcodes_.Mutable(index)->assign(std::move(value));
}
inline void Person_Address::set_postalcodes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  postalcodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Person.Address.postalcodes)
}
inline void Person_Address::set_postalcodes(int index, const char* value, size_t size) {
  postalcodes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Person.Address.postalcodes)
}
inline std::string* Person_Address::_internal_add_postalcodes() {
  return postalcodes_.Add();
}
inline void Person_Address::add_postalcodes(const std::string& value) {
  postalcodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Person.Address.postalcodes)
}
inline void Person_Address::add_postalcodes(std::string&& value) {
  postalcodes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Person.Address.postalcodes)
}
inline void Person_Address::add_postalcodes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  postalcodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Person.Address.postalcodes)
}
inline void Person_Address::add_postalcodes(const char* value, size_t size) {
  postalcodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Person.Address.postalcodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Person_Address::postalcodes() const {
  // @@protoc_insertion_point(field_list:Person.Address.postalcodes)
  return postalcodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Person_Address::mutable_postalcodes() {
  // @@protoc_insertion_point(field_mutable_list:Person.Address.postalcodes)
  return &postalcodes_;
}

// -------------------------------------------------------------------

// Person

// string name = 1;
inline void Person::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:Person.name)
  return _internal_name();
}
inline void Person::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Person.name)
}
inline std::string* Person::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Person.name)
  return _internal_mutable_name();
}
inline const std::string& Person::_internal_name() const {
  return name_.Get();
}
inline void Person::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Person::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Person.name)
}
inline void Person::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Person.name)
}
inline void Person::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Person.name)
}
inline std::string* Person::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Person::release_name() {
  // @@protoc_insertion_point(field_release:Person.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Person::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Person.name)
}

// int32 id = 2;
inline void Person::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::id() const {
  // @@protoc_insertion_point(field_get:Person.id)
  return _internal_id();
}
inline void Person::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Person::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Person.id)
}

// int32 age = 3;
inline void Person::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::age() const {
  // @@protoc_insertion_point(field_get:Person.age)
  return _internal_age();
}
inline void Person::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void Person::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:Person.age)
}

// int32 weight = 4;
inline void Person::clear_weight() {
  weight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::weight() const {
  // @@protoc_insertion_point(field_get:Person.weight)
  return _internal_weight();
}
inline void Person::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weight_ = value;
}
inline void Person::set_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:Person.weight)
}

// string email = 5;
inline void Person::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Person::email() const {
  // @@protoc_insertion_point(field_get:Person.email)
  return _internal_email();
}
inline void Person::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:Person.email)
}
inline std::string* Person::mutable_email() {
  // @@protoc_insertion_point(field_mutable:Person.email)
  return _internal_mutable_email();
}
inline const std::string& Person::_internal_email() const {
  return email_.Get();
}
inline void Person::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Person::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Person.email)
}
inline void Person::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Person.email)
}
inline void Person::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Person.email)
}
inline std::string* Person::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Person::release_email() {
  // @@protoc_insertion_point(field_release:Person.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Person::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Person.email)
}

// .Person.Address address = 6;
inline bool Person::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool Person::has_address() const {
  return _internal_has_address();
}
inline void Person::clear_address() {
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
inline const ::Person_Address& Person::_internal_address() const {
  const ::Person_Address* p = address_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Person_Address*>(
      &::_Person_Address_default_instance_);
}
inline const ::Person_Address& Person::address() const {
  // @@protoc_insertion_point(field_get:Person.address)
  return _internal_address();
}
inline void Person::unsafe_arena_set_allocated_address(
    ::Person_Address* address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Person.address)
}
inline ::Person_Address* Person::release_address() {
  
  ::Person_Address* temp = address_;
  address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Person_Address* Person::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:Person.address)
  
  ::Person_Address* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::Person_Address* Person::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::Person_Address>(GetArena());
    address_ = p;
  }
  return address_;
}
inline ::Person_Address* Person::mutable_address() {
  // @@protoc_insertion_point(field_mutable:Person.address)
  return _internal_mutable_address();
}
inline void Person::set_allocated_address(::Person_Address* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete address_;
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(address);
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:Person.address)
}

// repeated int32 friends = 7;
inline int Person::_internal_friends_size() const {
  return friends_.size();
}
inline int Person::friends_size() const {
  return _internal_friends_size();
}
inline void Person::clear_friends() {
  friends_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::friends(int index) const {
  // @@protoc_insertion_point(field_get:Person.friends)
  return _internal_friends(index);
}
inline void Person::set_friends(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  friends_.Set(index, value);
  // @@protoc_insertion_point(field_set:Person.friends)
}
inline void Person::_internal_add_friends(::PROTOBUF_NAMESPACE_ID::int32 value) {
  friends_.Add(value);
}
inline void Person::add_friends(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_friends(value);
  // @@protoc_insertion_point(field_add:Person.friends)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Person::_internal_friends() const {
  return friends_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Person::friends() const {
  // @@protoc_insertion_point(field_list:Person.friends)
  return _internal_friends();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Person::_internal_mutable_friends() {
  return &friends_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Person::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:Person.friends)
  return _internal_mutable_friends();
}

// double salary = 8;
inline void Person::clear_salary() {
  salary_ = 0;
}
inline double Person::_internal_salary() const {
  return salary_;
}
inline double Person::salary() const {
  // @@protoc_insertion_point(field_get:Person.salary)
  return _internal_salary();
}
inline void Person::_internal_set_salary(double value) {
  
  salary_ = value;
}
inline void Person::set_salary(double value) {
  _internal_set_salary(value);
  // @@protoc_insertion_point(field_set:Person.salary)
}

// repeated int32 bonuses = 9 [packed = true];
inline int Person::_internal_bonuses_size() const {
  return bonuses_.size();
}
inline int Person::bonuses_size() const {
  return _internal_bonuses_size();
}
inline void Person::clear_bonuses() {
  bonuses_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::_internal_bonuses(int index) const {
  return bonuses_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::bonuses(int index) const {
  // @@protoc_insertion_point(field_get:Person.bonuses)
  return _internal_bonuses(index);
}
inline void Person::set_bonuses(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bonuses_.Set(index, value);
  // @@protoc_insertion_point(field_set:Person.bonuses)
}
inline void Person::_internal_add_bonuses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bonuses_.Add(value);
}
inline void Person::add_bonuses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_bonuses(value);
  // @@protoc_insertion_point(field_add:Person.bonuses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Person::_internal_bonuses() const {
  return bonuses_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Person::bonuses() const {
  // @@protoc_insertion_point(field_list:Person.bonuses)
  return _internal_bonuses();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Person::_internal_mutable_bonuses() {
  return &bonuses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Person::mutable_bonuses() {
  // @@protoc_insertion_point(field_mutable_list:Person.bonuses)
  return _internal_mutable_bonuses();
}

// repeated double indexedPackedDouble = 10 [packed = true];
inline int Person::_internal_indexedpackeddouble_size() const {
  return indexedpackeddouble_.size();
}
inline int Person::indexedpackeddouble_size() const {
  return _internal_indexedpackeddouble_size();
}
inline void Person::clear_indexedpackeddouble() {
  indexedpackeddouble_.Clear();
}
inline double Person::_internal_indexedpackeddouble(int index) const {
  return indexedpackeddouble_.Get(index);
}
inline double Person::indexedpackeddouble(int index) const {
  // @@protoc_insertion_point(field_get:Person.indexedPackedDouble)
  return _internal_indexedpackeddouble(index);
}
inline void Person::set_indexedpackeddouble(int index, double value) {
  indexedpackeddouble_.Set(index, value);
  // @@protoc_insertion_point(field_set:Person.indexedPackedDouble)
}
inline void Person::_internal_add_indexedpackeddouble(double value) {
  indexedpackeddouble_.Add(value);
}
inline void Person::add_indexedpackeddouble(double value) {
  _internal_add_indexedpackeddouble(value);
  // @@protoc_insertion_point(field_add:Person.indexedPackedDouble)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Person::_internal_indexedpackeddouble() const {
  return indexedpackeddouble_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Person::indexedpackeddouble() const {
  // @@protoc_insertion_point(field_list:Person.indexedPackedDouble)
  return _internal_indexedpackeddouble();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Person::_internal_mutable_indexedpackeddouble() {
  return &indexedpackeddouble_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Person::mutable_indexedpackeddouble() {
  // @@protoc_insertion_point(field_mutable_list:Person.indexedPackedDouble)
  return _internal_mutable_indexedpackeddouble();
}

// repeated string indexedUnpackedDouble = 11 [packed = false];
inline int Person::_internal_indexedunpackeddouble_size() const {
  return indexedunpackeddouble_.size();
}
inline int Person::indexedunpackeddouble_size() const {
  return _internal_indexedunpackeddouble_size();
}
inline void Person::clear_indexedunpackeddouble() {
  indexedunpackeddouble_.Clear();
}
inline std::string* Person::add_indexedunpackeddouble() {
  // @@protoc_insertion_point(field_add_mutable:Person.indexedUnpackedDouble)
  return _internal_add_indexedunpackeddouble();
}
inline const std::string& Person::_internal_indexedunpackeddouble(int index) const {
  return indexedunpackeddouble_.Get(index);
}
inline const std::string& Person::indexedunpackeddouble(int index) const {
  // @@protoc_insertion_point(field_get:Person.indexedUnpackedDouble)
  return _internal_indexedunpackeddouble(index);
}
inline std::string* Person::mutable_indexedunpackeddouble(int index) {
  // @@protoc_insertion_point(field_mutable:Person.indexedUnpackedDouble)
  return indexedunpackeddouble_.Mutable(index);
}
inline void Person::set_indexedunpackeddouble(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Person.indexedUnpackedDouble)
  indexedunpackeddouble_.Mutable(index)->assign(value);
}
inline void Person::set_indexedunpackeddouble(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Person.indexedUnpackedDouble)
  indexedunpackeddouble_.Mutable(index)->assign(std::move(value));
}
inline void Person::set_indexedunpackeddouble(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  indexedunpackeddouble_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Person.indexedUnpackedDouble)
}
inline void Person::set_indexedunpackeddouble(int index, const char* value, size_t size) {
  indexedunpackeddouble_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Person.indexedUnpackedDouble)
}
inline std::string* Person::_internal_add_indexedunpackeddouble() {
  return indexedunpackeddouble_.Add();
}
inline void Person::add_indexedunpackeddouble(const std::string& value) {
  indexedunpackeddouble_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Person.indexedUnpackedDouble)
}
inline void Person::add_indexedunpackeddouble(std::string&& value) {
  indexedunpackeddouble_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Person.indexedUnpackedDouble)
}
inline void Person::add_indexedunpackeddouble(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  indexedunpackeddouble_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Person.indexedUnpackedDouble)
}
inline void Person::add_indexedunpackeddouble(const char* value, size_t size) {
  indexedunpackeddouble_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Person.indexedUnpackedDouble)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Person::indexedunpackeddouble() const {
  // @@protoc_insertion_point(field_list:Person.indexedUnpackedDouble)
  return indexedunpackeddouble_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Person::mutable_indexedunpackeddouble() {
  // @@protoc_insertion_point(field_mutable_list:Person.indexedUnpackedDouble)
  return &indexedunpackeddouble_;
}

// bool enabled = 12;
inline void Person::clear_enabled() {
  enabled_ = false;
}
inline bool Person::_internal_enabled() const {
  return enabled_;
}
inline bool Person::enabled() const {
  // @@protoc_insertion_point(field_get:Person.enabled)
  return _internal_enabled();
}
inline void Person::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Person::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:Person.enabled)
}

// fixed64 fixedField = 13;
inline void Person::clear_fixedfield() {
  fixedfield_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person::_internal_fixedfield() const {
  return fixedfield_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person::fixedfield() const {
  // @@protoc_insertion_point(field_get:Person.fixedField)
  return _internal_fixedfield();
}
inline void Person::_internal_set_fixedfield(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fixedfield_ = value;
}
inline void Person::set_fixedfield(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fixedfield(value);
  // @@protoc_insertion_point(field_set:Person.fixedField)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_schema_2eproto
